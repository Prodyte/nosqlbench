min_version: 5.21.1
description: |
  Sample Neo4J Driver workload for ANN. Responsible for resetting/creating schema, ingesting vector
  data from HDF5 file format, and then performing ANN queries against the ingested data

  Template Variables:
  TEMPLATE(datafile)
  TEMPLATE(node_label,Node)
  TEMPLATE(k,100)
  TEMPLATE(batch_size)
  TEMPLATE(delete_batch_size,5000)

bindings:
  id: ToString()
  id_batch: Mul(TEMPLATE(batch_size)L); ListSizedStepped(TEMPLATE(batch_size),long->ToString());
  train_vector: HdfFileToFloatList("testdata/TEMPLATE(datafile).hdf5", "/train");
  train_vector_batch: Mul(TEMPLATE(batch_size)L); ListSizedStepped(TEMPLATE(batch_size),HdfFileToFloatList("testdata/TEMPLATE(datafile).hdf5", "/train"));
  test_vector: HdfFileToFloatList("testdata/TEMPLATE(datafile).hdf5", "/test");
  relevant_indices: HdfFileToIntArray("testdata/TEMPLATE(datafile).hdf5", "/neighbors")

blocks:
  # TODO: Node deletion times out; attempt this in future: CREATE OR REPLACE DATABASE neo4j
  reset-schema:
    ops:
      # Reference: https://support.neo4j.com/s/article/360059882854-Deleting-large-numbers-of-nodes#h_01H95CXNJ8TN4126T3Y01BRWKS
      delete_nodes:
        autocommit: |
          MATCH (n)
          CALL { WITH n
          DETACH DELETE n
          } IN TRANSACTIONS OF $delete_batch_size ROWS;
        query_params:
          delete_batch_size: TEMPLATE(delete_batch_size,5000)
      drop_index:
        autocommit: DROP INDEX $index_name IF EXISTS
        query_params:
          index_name: vector_index

  schema:
    ops:
      create_vector_index:
        autocommit: |
          CREATE VECTOR INDEX $index_name IF NOT EXISTS FOR (n:TEMPLATE(node_label,Node))
          ON (n.embedding) OPTIONS
          {indexConfig: {`vector.dimensions`: $dimension, `vector.similarity_function`: $similarity_function}}
        query_params:
          index_name: vector_index
          dimension: TEMPLATE(dimension)
          similarity_function: TEMPLATE(similarity_function,cosine)

  rampup:
    ops:
      insert_node:
        write_transaction: |
          CREATE (v:TEMPLATE(node_label,Node) {id: $id, embedding: $vector})
        query_params:
          id: '{id}'
          vector: '{train_vector}'

  rampup-batch:
    ops:
      # Reference: https://community.neo4j.com/t/unwind-multiple-arrays-to-set-property/59908/5
      insert_nodes:
        write_transaction: |
          WITH $id_list as ids, $vector_list as vectors
          UNWIND RANGE(0, size(ids) - 1) as idx
          CREATE (v:TEMPLATE(node_label,Node) {id: ids[idx], embedding: vectors[idx]})
        query_params:
          id_list: '{id_batch}'
          vector_list: '{train_vector_batch}'

  search:
    ops:
      search:
        read_transaction: |
          WITH $query_vector AS queryVector
          CALL db.index.vector.queryNodes($index_name, $k, queryVector)
          YIELD node
          RETURN node.id
        query_params:
          query_vector: '{test_vector}'
          index_name: vector_index
          k: TEMPLATE(k,100)
        verifier-init: |
          relevancy = new io.nosqlbench.nb.api.engine.metrics.wrappers.RelevancyMeasures(_parsed_op);
          for (int k in List.of(100)) {
            relevancy.addFunction(io.nosqlbench.engine.extensions.computefunctions.RelevancyFunctions.recall("recall",k));
            relevancy.addFunction(io.nosqlbench.engine.extensions.computefunctions.RelevancyFunctions.precision("precision",k));
            relevancy.addFunction(io.nosqlbench.engine.extensions.computefunctions.RelevancyFunctions.F1("F1",k));
            relevancy.addFunction(io.nosqlbench.engine.extensions.computefunctions.RelevancyFunctions.reciprocal_rank("RR",k));
            relevancy.addFunction(io.nosqlbench.engine.extensions.computefunctions.RelevancyFunctions.average_precision("AP",k));
          }
        verifier: |
          // result is a Record[]
          values = io.nosqlbench.adapter.neo4j.Neo4JAdapterUtils.getFieldForAllRecords(result, "node.id")
          ann = values.collect { it.toString().toInteger() }.toArray(new Integer[values.size()])
          knn = {relevant_indices}
          relevancy.accept(knn, ann);
          return true;
