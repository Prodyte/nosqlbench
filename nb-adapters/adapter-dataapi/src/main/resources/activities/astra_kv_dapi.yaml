min_version: "5.21.0"

description: |
 A basic workload that uses the DataStax Data API Client in Java, emulating what
 applications would do in the native stack.
 variations:
  without vector:
   with _id:
    search by id=
    search by id<
   NOT USED: with uuid:
  with vector:
   with _id:
    search by id=
    search by id<
    vector search with filter by id<
    vector search with vector ~
   with uuid:
    vector search with vector ~

 cardinality=TEMPLATE(cardinality,1000)
 collection=TEMPLATE(collection,keyvalue)
 dimensions=TEMPLATE(dimensions,1536)
 similarity=TEMPLATE(similarity,COSINE)
 keycount=TEMPLATE(keycount,TEMPLATE(cardinality))
 valuecount=TEMPLATE(valuecount,TEMPLATE(cardinality))
 rampup-threads=TEMPLATE(rampup-threads,100)


scenarios:

  astra_dapi_kv_id:
    schema: >-
      run driver=dataapi
      tags==block:schema_kv
      threads==1 cycles==UNDEF
    rampup: >-
      run driver=dataapi
      tags==block:rampup_kv_id
      cycles===TEMPLATE(rampup-cycles,TEMPLATE(cardinality))
      threads=TEMPLATE(rampup-threads)
      errors=count
    find_kv_by_id: >-
      run driver=dataapi
      tags==block:find_kv_by_id
      cycles===TEMPLATE(main-cycles,1000)
      threads=auto errors=count
    find_kv_lt_id: >-
      run driver=dataapi
      tags==block:find_kv_lt_id
      cycles===TEMPLATE(main-cycles,1000)
      threads=auto errors=count

  astra_dapi_v1536_id:
    schema_vector: >-
      run driver=dataapi
      tags==block:schema_v1536
      threads==1 cycles==UNDEF
    rampup_vector: >-
      run driver=dataapi
      tags==block:rampup_v1536_id
      cycles===TEMPLATE(rampup-cycles,TEMPLATE(cardinality))
      threads=TEMPLATE(rampup-threads)
      errors=count
    find_kv_by_id: >-
      run driver=dataapi
      tags==block:find_kv_by_id
      cycles===TEMPLATE(main-cycles,1000)
      threads=auto errors=count
    find_kv_lt_id: >-
      run driver=dataapi
      tags==block:find_kv_lt_id
      cycles===TEMPLATE(main-cycles,1000)
      threads=auto errors=count
    find_by_vector: >-
      run driver=dataapi
      tags==block:find_by_vector
      cycles===TEMPLATE(main-cycles,TEMPLATE(cardinality))
      threads=auto errors=count
    find_by_vector_lt_id: >-
      run driver=dataapi
      tags==block:find_by_vector_lt_id
      cycles===TEMPLATE(main-cycles,TEMPLATE(cardinality))
      threads=auto errors=count

  astra_dapi_v1536_uuid:
    schema_vector: >-
      run driver=dataapi
      tags==block:schema_v1536
      threads==1 cycles==UNDEF
    rampup_vector: >-
      run driver=dataapi
      tags==block:rampup_v1536_uuid
      cycles===TEMPLATE(rampup-cycles,TEMPLATE(cardinality))
      threads=TEMPLATE(rampup-threads)
      errors=count
    find_by_vector: >-
      run driver=dataapi
      tags==block:find_by_vector
      cycles===TEMPLATE(main-cycles,TEMPLATE(cardinality))
      threads=auto errors=count

bindings:

  seq_key: Mod(TEMPLATE(keycount)); ToString() -> String
  seq_value: Hash(); Mod(TEMPLATE(valuecount)); ToString() -> String
  rw_key: TEMPLATE(keydist,Uniform(0,TEMPLATE(keycount))); ToString() -> String
  rw_key_num: TEMPLATE(keydist,Uniform(0,TEMPLATE(keycount)));
  rw_value: Hash(); TEMPLATE(valdist,Uniform(0,TEMPLATE(valuecount))); ToString() -> String
  vector_value: HashedFloatVectors(TEMPLATE(dimensions,1536));
  request_id: ToHashedUUID(); ToString();

params:
  cl: TEMPLATE(cl,LOCAL_QUORUM)
  instrument: true

blocks:

  reset_schema:
    ops:
      drop_index:
        raw: |-
          DROP INDEX IF EXISTS TEMPLATE(keyspace, baselines).TEMPLATE(table,keyvalue)_value_idx;
      drop-table:
        raw: |-
          DROP TABLE IF EXISTS TEMPLATE(keyspace, baselines).TEMPLATE(table,keyvalue);

# Schema

  schema_kv:
    ops:
      delete_collection_op:
        delete_collection: "TEMPLATE(collection)"
      create_collection_op:
        create_collection: "TEMPLATE(collection)"

  schema_v1536:
    ops:
      delete_collection_op_v:
        delete_collection: "TEMPLATE(collection)_v"
      create_collection_op_v:
        create_collection: "TEMPLATE(collection)_v"
        dimensions: TEMPLATE(dimensions)
        similarity: TEMPLATE(similarity)

# Rampup

  rampup_kv_id:
    ops:
      insert_one_op:
        insert_one: "TEMPLATE(collection)"
        document:
          _id: "{seq_key}"
          value: "{seq_value}"

#  rampup_kv_uuid:
#    ops:
#      insert_one_op:
#        insert_one: "TEMPLATE(collection)"
#        document:
#          value: "{seq_value}"


  rampup_v1536_id:
    ops:
      insert_one_op_v:
        insert_one_vector: "TEMPLATE(collection)_v"
        document:
          _id: "{seq_key}"
          value: "{seq_value}"
        vector: "{vector_value}"

  rampup_v1536_uuid:
    ops:
      insert_one_op_v:
        insert_one_vector: "TEMPLATE(collection)_v"
        document:
          value: "{seq_value}"
        vector: "{vector_value}"

  find_kv_by_id:
    ops:
      find_op:
        find: "TEMPLATE(collection)"
        filters:
          - conjunction: "and"
            operator: "eq"
            field: "_id"
            value: "{rw_key}"

  find_kv_lt_id:
    params:
      ratio: 5
    ops:
      find_kv_id_lt:
        find: "TEMPLATE(collection)"
        filters:
          - conjunction: "and"
            operator: "lt"
            field: "_id"
            value: "{rw_key_num}"

  find_by_vector_lt_id:
    params:
      ratio: 5
    ops:
      find_kv_id_lt:
        find: "TEMPLATE(collection)"
        filters:
          - conjunction: "and"
            operator: "lt"
            field: "_id"
            value: "{rw_key_num}"
        vector: "{vector_value}"

  find_by_vector:
    params:
      ratio: 5
    ops:
      find_op_filter_v:
        find_vector_filter: "TEMPLATE(collection)"
        vector: "{vector_value}"

#  main_ann_with_vector_limit_20:
#    params:
#      ratio: 5
#    ops:
#      find_op:
#        find: "TEMPLATE(collection)"
#        sort:
#          vector: "{vector_value}"
#          options:
#            limit: 20
#  schema_with_text_sai:
#    ops:
#      delete_collection_op:
#        delete_collection: "TEMPLATE(collection)"
#      create_collection_op:
#        create_collection: "TEMPLATE(collection)"
#  rampup_with_text_sai:
#    ops:
#      insert_one_op:
#        insert_one: "TEMPLATE(collection)"
#        document:
#          _id: "{seq_key}"
#          value: "{seq_value}"
#  main_read_with_text_sai:
#    params:
#      ratio: 5
#    ops:
#      find_op:
#        find: "TEMPLATE(collection)"
#        filter:
#          value: "{rw_value}"
